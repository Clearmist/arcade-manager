@{
    ViewData["title"] = "Overlays";
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index" class="navmenu">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page">Install overlays</li>
    </ol>
</nav>

<h2>
    Download and install an overlays pack
    <a asp-controller="Help" asp-action="Shares" class="navmenu">How to access my Retropie/Recabox shares</a>
</h2>

<p>
    Select the overlays pack you want, and the arcade roms folder(s) to install overlays in.
    This will download and install only the files you need.<br>
    Note that <strong>it will only work with Libretro emulators</strong> (mame-libretro and fba-libretro),
    not AdvanceMAME, MAME4All, FBA2x, PiFBA, etc.
</p>

<div class="alert alert-info">
    These overlays are made for a 16:9 resolution (like 1080p or 720p for example). They won't work with another aspect ratio.
</div>

<div class="row">
    <div class="col-6">
        <h3>Overlay pack</h3>
        <!-- selection of pack -->
        <div id="packs"></div>
    </div>
    <div class="col-6">
        <h3>Settings</h3>
        <!-- roms folder -->
        <div id="romFoldersContainer">
            <div class="input-group mb-0">
                <div class="input-group-prepend">
                    <span class="input-group-text">Roms folder</span>
                </div>
                <input type="text" class="form-control" id="romFolder" placeholder="Roms folder (ex: \\retropie\roms\arcade)">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary browse folder" type="button" data-input="romFolder">Browse</button>
                </div>
            </div>
        </div>
        <!-- config folder -->
        <div id="configFolderContainer">
            <hr>
            <div class="input-group mb-0">
                <div class="input-group-prepend">
                    <span class="input-group-text">Config folder</span>
                </div>
                <input type="text" class="form-control" id="configFolder" placeholder="Config folder (ex: \\retropie\configs)">
                <div class="input-group-append">
                    <button class="btn btn-outline-secondary browse folder" type="button" data-input="configFolder">Browse</button>
                </div>
            </div>
        </div>
        <hr>
        <div class="row">
            <!-- resize -->
            <div class="col-6">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Width" id="width" value="1920">
                    <div class="input-group-append input-group-prepend">
                        <span class="input-group-text">&times;</span>
                    </div>
                    <input type="text" class="form-control" placeholder="Height" id="height" value="1080">
                </div>
                <small>
                    <a href="#" class="setsize" data-width="2560" data-height="1440">1440p</a>
                    /
                    <a href="#" class="setsize" data-width="1920" data-height="1080">1080p</a>
                    /
                    <a href="#" class="setsize" data-width="1280" data-height="720">720p</a>
                </small>
            </div>
            <!-- overwrite -->
            <div class="col-6">
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="overwrite" id="overwriteYes" value="yes">
                    <label class="form-check-label" for="overwriteYes">Overwrite existing files</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="overwrite" id="overwriteNo" value="no" checked>
                    <label class="form-check-label" for="overwriteNo">Do not overwrite existing files</label>
                </div>
            </div>
        </div>
    </div>
</div>

<p class="mt-3">
    <button type="button" id="buttonInstall" class="btn btn-primary btn-lg btn-block">Download and install</button>
</p>

<script type="text/template" id="overlayTemplate">
    <div>
        <a href="#" class="border rounded d-block p-3 mb-3 text-dark">
            <input type="radio" class="float-left mr-3 mt-4">
            <img src="" class="float-left mr-3">
            <h5 class="mb-1 name"></h5>
            <p class="mb-0 desc"></p>
        </a>
    </div>
</script>

<script type="text/template" id="folderTemplate">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" name="romFolder" id="" value="" checked>
        <label class="form-check-label" for=""></label>
    </div>
</script>

@section Scripts {
    <script>
        getOs((os) => {
            getAppData((appData) => {
                // values from appdata
                const configShare = appData.defaults.configs[os] ? appData.defaults.configs[os][platform] : '';
                const romShare = appData.defaults.roms[os] ? appData.defaults.roms[os][platform] : '';

                $('h2').append($('<img src="/img/' + os + '-h.png">'));

                // check that the configs share can be accessed
                ipc('fs-exists', configShare, (exists) => {
                    if (exists) {
                        $('#configFolderContainer').hide();
                        $('#configFolder').val(configShare)
                    }
                });
                
                // list roms folders
                const folderTemplate = $('#folderTemplate').html();
                ipc('fs-exists', romShare, (exists) => {
                    if (exists) {
                        $('#romFoldersContainer')
                            .empty()
                            .append($('<label>Roms folders</label>'));
                        for (let folder of appData.defaults.romFolders[os]) {
                            const romFolder = romShare + "/" + folder;
                            ipc('fs-exists', romFolder, (exists) => {
                                if (exists) {
                                    const li = $(folderTemplate);

                                    li.find('.form-check-input').val(romFolder).attr('id', 'romFolder' + folder);
                                    li.find('.form-check-label').text(folder).attr('for', 'romFolder' + folder);

                                    $('#romFoldersContainer').append(li);
                                }
                            });
                        }
                    }
                });

                // list overlays packs
                let ovlTemplate = $('#overlayTemplate').html();
                for (let ovl of appData.overlays) {
                    let li = $(ovlTemplate);

                    // build pack infos
                    li.find('.name').text(ovl.name);
                    li.find('.desc').text(ovl.description);
                    if (ovl.image !== '') {
                        li.find('img').attr('src', ovl.image);
                    } else {
                        li.find('img').remove();
                    }

                    // pack meta-data
                    li.data('pack', ovl.name);

                    li.on('click', () => {
                        $('#packs').find('.active').removeClass('active');
                        $('#packs').find(':radio').prop('checked', false);
                        li.addClass('active').find(':radio').prop('checked', true);
                    });

                    $('#packs').append(li);
                }

                // handle click on resolution presets
                $('a.setsize').on('click', (e) => {
                    let link = $(e.currentTarget);
                    $('#width').val(link.data('width'));
                    $('#height').val(link.data('height'));
                });

                // Handle click on validation button
                $('#buttonInstall').on('click', (e) => {
                    let pack = $('#packs .active'),
                        overwrite = $('input[name=overwrite]:checked').val() == 'yes' ? true : false,
                        romFolders = $('input[name=romFolder]:checked').map((idx, item) => $(item).val()).get(),
                        configFolder = $('#configFolder').val(),
                        width = parseInt($('#width').val()),
                        height = parseInt($('#height').val());

                    // rom folder is not found, maybe it's the text input
                    if (romFolders.length === 0 && $('#romFolder').length > 0 && $('#romFolder').val() !== '') {
                        romFolders = [ $('#romFolder').val() ];
                    }

                    // check the width/height aspect ratio is OK
                    if (width / height !== 16 / 9) {
                        window.alert('Resolution is not correct. These packs will only work with 16:9 screens.');
                        return;
                    }

                    // check inputs and paths
                    if (pack.length === 0) { window.alert('Please select an overlay pack'); return; }
                    if (romFolders.length === 0) { window.alert('Please select the roms folder'); return; }
                    if (!configFolder || configFolder === '') { window.alert('Please fill the path to the config share'); return; }

                    // download and install pack
                    ipc('overlays-download', { romFolders, configFolder, pack: pack.data('pack'), overwrite, ratio: (height / 1080) });
                });
            });
        });
    </script>
}
