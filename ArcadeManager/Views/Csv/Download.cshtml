@{
    ViewData["title"] = "Download a pre-built list";
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index" class="navmenu">Home</a></li>
        <li class="breadcrumb-item"><a asp-controller="Csv" asp-action="Index" class="navmenu">Manage games lists</a></li>
        <li class="breadcrumb-item active" aria-current="page">Download</li>
    </ol>
</nav>

<h2>Download a pre-built games list</h2>

<div class="row">
    <div class="col-4">
        <div class="list-group" id="csvs"></div>
    </div>
    <div class="col-8" id="files">Please select an emulator version on the left.</div>
</div>

<script type="text/template" id="csvItemTemplate">
    <a href="#" class="list-group-item list-group-item-action">
        <p class="mb-0 mt-0 font-weight-bold text-primary name"></p>
        <p class="mb-0 mt-0 text-muted desc"><small></small></p>
    </a>
</script>

<script type="text/template" id="fileItemTemplate">
    <a href="#" class="list-group-item list-group-item-action">
        <h6 class="mb-0 mt-0 file"></h6>
        <p class="mb-0 mt-0 text-muted desc"></p>
    </a>
</script>

@section Scripts {
<script>
    $(() => {
        const template = $('#csvItemTemplate').html();

        getAppData((appData) => {
            // list CSV folders
            for (let csv of appData.csv) {
                const li = $(template);
                li.find('.name').text(csv.name);
                li.find('.desc small').text(csv.description);

                li.on('click', () => {
                    $('#csvs').find('a').removeClass('active');
                    li.addClass('active');

                    listFiles(csv.repository, csv.folder, csv.details, li.find('.name').text());
                });

                $('#csvs').append(li);
            }
        });
    });

    /**
     * List the files in a CSV repository and displays them in the window
     *
     * @@param {string} repository The repository: username/repository
     * @@param {string} folder The path to the folder: csv/mame2003
     * @@param {string} details The path to the files details: csv/files.json
     * @@param {string} name The name of the repository to load
     */
    function listFiles(repository, folder, details, name) {
        $('#files').empty().html('Loading ' + name + ', please wait...');
        const template = $('#fileItemTemplate').html();

        getRemoteList(repository, details, folder, (data) => {
            $('#files').empty();

            for (let filedetail of data) {
                const fileItem = $(template);
                fileItem.find('.file').text(filedetail.filename);
                fileItem.find('.desc').text(filedetail.description);
                if (filedetail.types.indexOf('main') >= 0) {
                    fileItem.addClass('text-primary border-primary');
                }

                // handle click
                fileItem.on('click', (e) => {
                    newFile(filedetail.filename, (filename) => {
                        if (typeof filename !== 'undefined' && filename !== '') {
                            progressInit('Download file');

                            downloadFile(repository, folder + '/' + filedetail.filename, filename, (success) => {
                                if (success) {
                                    progressDone('Done.');
                                } else {
                                    progressDone('An error has occurred during file download.');
                                }
                            });
                        }
                    });
                });

                $('#files').append(fileItem);
            }
        });
    }
</script>
}
